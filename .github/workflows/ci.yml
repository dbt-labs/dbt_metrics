name: Continuous Integration

on:
  push:
    paths-ignore:
      - "**.md"
    branches:
      - "main"
  pull_request:
    paths-ignore:
      - "**.md"

jobs:
  postgres:
    runs-on: ubuntu-latest

    # set up env vars so that we can use them to start an instance of postgres
    env:
      POSTGRES_TEST_USER: postgres
      POSTGRES_TEST_PASSWORD: postgres
      POSTGRES_TEST_DB: gha_test
      POSTGRES_TEST_PORT: 5432
      POSTGRES_TEST_HOST: localhost

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{ env.POSTGRES_TEST_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_TEST_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_TEST_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - uses: ./.github/actions/end-to-end-test
        with:
          dbt-target: postgres
          database-adapter-package: dbt-postgres

  snowflake:
    needs: postgres
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - uses: ./.github/actions/end-to-end-test
        env:
          SNOWFLAKE_TEST_ACCOUNT: ${{ secrets.SNOWFLAKE_TEST_ACCOUNT }}
          SNOWFLAKE_TEST_USER: ${{ secrets.SNOWFLAKE_TEST_USER }}
          SNOWFLAKE_TEST_PASSWORD: ${{ secrets.SNOWFLAKE_TEST_PASSWORD }}
          SNOWFLAKE_TEST_ROLE: ${{ secrets.SNOWFLAKE_TEST_ROLE }}
          SNOWFLAKE_TEST_DATABASE: ${{ secrets.SNOWFLAKE_TEST_DATABASE }}
          SNOWFLAKE_TEST_WAREHOUSE: ${{ secrets.SNOWFLAKE_TEST_WAREHOUSE }}
        with:
          dbt-target: snowflake
          database-adapter-package: dbt-snowflake

  redshift:
    needs: postgres
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - uses: ./.github/actions/end-to-end-test
        env:
          REDSHIFT_TEST_HOST: ${{ secrets.REDSHIFT_TEST_HOST }}
          REDSHIFT_TEST_USER: ${{ secrets.REDSHIFT_TEST_USER }}
          REDSHIFT_TEST_PASS: ${{ secrets.REDSHIFT_TEST_PASS }}
          REDSHIFT_TEST_DBNAME: ${{ secrets.REDSHIFT_TEST_DBNAME }}
          REDSHIFT_TEST_PORT: ${{ secrets.REDSHIFT_TEST_PORT }}
        with:
          dbt-target: redshift
          database-adapter-package: dbt-redshift

  bigquery:
    needs: postgres
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Set up service key file
        id: keyfile
        env:
          BIGQUERY_TEST_SERVICE_ACCOUNT_JSON: ${{ secrets.BIGQUERY_TEST_SERVICE_ACCOUNT_JSON }}
        run: |
          mkdir -p $HOME/.dbt
          KEYFILE_PATH=$HOME/.dbt/bigquery-service-key.json
          echo $BIGQUERY_TEST_SERVICE_ACCOUNT_JSON > $KEYFILE_PATH
          echo ::set-output name=path::$KEYFILE_PATH

      - uses: ./.github/actions/end-to-end-test
        env:
          BIGQUERY_SERVICE_KEY_PATH: ${{ steps.keyfile.outputs.path }}
          BIGQUERY_TEST_DATABASE: ${{ secrets.BIGQUERY_TEST_DATABASE }}
        with:
          dbt-target: bigquery
          database-adapter-package: dbt-bigquery
